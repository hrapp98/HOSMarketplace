# Docker Compose for production deployment
version: '3.8'

services:
  # Production PostgreSQL with optimized settings
  postgres:
    environment:
      POSTGRES_DB: hireoverseas_prod
      POSTGRES_USER: hireoverseas_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'

  # Production Redis with optimized settings
  redis:
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '0.5'
        reservations:
          memory: 256MB
          cpus: '0.25'

  # Production app with optimizations
  app:
    environment:
      NODE_ENV: production
      # Production database
      DATABASE_URL: postgresql://hireoverseas_user:${POSTGRES_PASSWORD}@postgres:5432/hireoverseas_prod?schema=public&pgbouncer=true&connection_limit=10
      
      # Production Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Performance optimizations
      NODE_OPTIONS: "--max-old-space-size=1024"
      
      # Security
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      
      # External services
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Analytics
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        order: start-first

  # Production Nginx with SSL and security headers
  nginx:
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
      - ./nginx/logs:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.5'
        reservations:
          memory: 128MB
          cpus: '0.25'

  # Production monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hireoverseas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - hireoverseas-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hireoverseas-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hireoverseas-network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hireoverseas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16