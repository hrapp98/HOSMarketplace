# Cleanup and Maintenance Workflow
name: Cleanup and Maintenance

on:
  schedule:
    # Run daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        type: choice
        options:
          - docker-images
          - old-backups
          - artifacts
          - logs
          - all

jobs:
  cleanup-docker-images:
    name: Cleanup Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'docker-images' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Cleanup Docker images on ${{ matrix.environment }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ matrix.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ matrix.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ matrix.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            echo "üßπ Cleaning up Docker images on ${{ matrix.environment }}..."
            
            # Remove unused images (keep images from last 7 days)
            docker image prune -af --filter "until=168h"
            
            # Remove dangling images
            docker image prune -f
            
            # Remove unused containers
            docker container prune -f
            
            # Remove unused networks
            docker network prune -f
            
            # Remove unused volumes (be careful with this)
            # docker volume prune -f
            
            # Clean up build cache
            docker builder prune -af --filter "until=72h"
            
            # Show disk usage after cleanup
            echo "Disk usage after cleanup:"
            df -h
            
            echo "Docker system disk usage:"
            docker system df

  cleanup-old-backups:
    name: Cleanup Old Backups
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'old-backups' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Cleanup old backups on ${{ matrix.environment }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ matrix.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ matrix.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ matrix.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            echo "üóëÔ∏è Cleaning up old backups on ${{ matrix.environment }}..."
            
            # Keep backups for different retention periods based on environment
            if [ "${{ matrix.environment }}" == "production" ]; then
              # Production: keep 30 days of daily backups, 12 weeks of weekly backups
              find /opt/backups -name "*.tar.gz" -mtime +30 -not -name "*weekly*" -delete
              find /opt/backups -name "*weekly*.tar.gz" -mtime +84 -delete
            else
              # Staging: keep 7 days of backups
              find /opt/backups -name "*.tar.gz" -mtime +7 -delete
            fi
            
            # Clean up database backup files
            find /opt/backups -name "*.sql" -mtime +1 -delete
            find /opt/backups -name "*.sql.gz" -mtime +7 -delete
            
            # Show remaining backups
            echo "Remaining backups:"
            ls -la /opt/backups/ | head -20

  cleanup-github-artifacts:
    name: Cleanup GitHub Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'artifacts' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            let deletedCount = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              
              if (createdAt < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id
                  });
                  
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.error(`Failed to delete artifact ${artifact.name}:`, error.message);
                }
              }
            }
            
            console.log(`Total artifacts deleted: ${deletedCount}`);

  cleanup-logs:
    name: Cleanup Application Logs
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'logs' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Cleanup application logs on ${{ matrix.environment }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ matrix.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ matrix.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ matrix.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            echo "üìã Cleaning up application logs on ${{ matrix.environment }}..."
            
            # Clean up Nginx logs (keep 14 days)
            find /opt/hireoverseas-${{ matrix.environment }}/nginx/logs -name "*.log" -mtime +14 -delete
            
            # Clean up Docker logs
            docker logs --tail 1000 hireoverseas-app > /tmp/app.log 2>&1 || true
            docker logs --tail 1000 hireoverseas-nginx > /tmp/nginx.log 2>&1 || true
            docker logs --tail 1000 hireoverseas-postgres > /tmp/postgres.log 2>&1 || true
            docker logs --tail 1000 hireoverseas-redis > /tmp/redis.log 2>&1 || true
            
            # Rotate Docker container logs
            truncate -s 0 $(docker inspect --format='{{.LogPath}}' hireoverseas-app) 2>/dev/null || true
            truncate -s 0 $(docker inspect --format='{{.LogPath}}' hireoverseas-nginx) 2>/dev/null || true
            truncate -s 0 $(docker inspect --format='{{.LogPath}}' hireoverseas-postgres) 2>/dev/null || true
            truncate -s 0 $(docker inspect --format='{{.LogPath}}' hireoverseas-redis) 2>/dev/null || true
            
            # Clean up system logs
            sudo journalctl --vacuum-time=7d
            
            # Show disk usage after cleanup
            echo "Disk usage after log cleanup:"
            df -h

  database-maintenance:
    name: Database Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.cleanup_type == 'all'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Run database maintenance on ${{ matrix.environment }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ matrix.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ matrix.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ matrix.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            echo "üîß Running database maintenance on ${{ matrix.environment }}..."
            
            # Set database name based on environment
            DB_NAME="hireoverseas_${{ matrix.environment == 'production' && 'prod' || 'staging' }}"
            
            # Run VACUUM and ANALYZE on PostgreSQL
            docker exec hireoverseas-postgres psql -U hireoverseas_user -d $DB_NAME -c "
              VACUUM ANALYZE;
              REINDEX DATABASE $DB_NAME;
            "
            
            # Check database size and statistics
            docker exec hireoverseas-postgres psql -U hireoverseas_user -d $DB_NAME -c "
              SELECT 
                pg_size_pretty(pg_database_size('$DB_NAME')) as database_size,
                (SELECT count(*) FROM pg_stat_user_tables) as table_count;
            "
            
            # Clean up old sessions and temporary data
            docker exec hireoverseas-postgres psql -U hireoverseas_user -d $DB_NAME -c "
              DELETE FROM \"Session\" WHERE expires < NOW() - INTERVAL '1 day';
              DELETE FROM \"VerificationToken\" WHERE expires < NOW();
            "

  security-updates:
    name: Check Security Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for security updates
        run: |
          echo "üîí Checking for security updates..."
          
          # Check npm audit
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check outdated packages
          npm outdated --json > outdated-packages.json || true
          
          # Generate security report
          cat > security-update-report.md << EOF
          # Security Updates Report
          Generated on: $(date)
          
          ## NPM Audit Results
          $(npm audit --audit-level=moderate || echo "No security vulnerabilities found")
          
          ## Outdated Packages
          $(npm outdated || echo "All packages are up to date")
          EOF

      - name: Upload security update report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-update-report
          path: |
            security-update-report.md
            audit-results.json
            outdated-packages.json
          retention-days: 30

  generate-maintenance-report:
    name: Generate Maintenance Report
    runs-on: ubuntu-latest
    needs: [cleanup-docker-images, cleanup-old-backups, cleanup-github-artifacts, cleanup-logs, database-maintenance, security-updates]
    if: always()
    
    steps:
      - name: Generate maintenance report
        run: |
          echo "# Daily Maintenance Report" > maintenance-report.md
          echo "Generated on: $(date)" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          echo "## Cleanup Results" >> maintenance-report.md
          echo "- Docker Images Cleanup: ${{ needs.cleanup-docker-images.result }}" >> maintenance-report.md
          echo "- Old Backups Cleanup: ${{ needs.cleanup-old-backups.result }}" >> maintenance-report.md
          echo "- GitHub Artifacts Cleanup: ${{ needs.cleanup-github-artifacts.result }}" >> maintenance-report.md
          echo "- Logs Cleanup: ${{ needs.cleanup-logs.result }}" >> maintenance-report.md
          echo "- Database Maintenance: ${{ needs.database-maintenance.result }}" >> maintenance-report.md
          echo "- Security Updates Check: ${{ needs.security-updates.result }}" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          echo "## Next Scheduled Maintenance" >> maintenance-report.md
          echo "Next automatic maintenance: $(date -d '+1 day' '+%Y-%m-%d 04:00 UTC')" >> maintenance-report.md

      - name: Upload maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report
          path: maintenance-report.md
          retention-days: 7

      - name: Notify maintenance completion
        if: github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#maintenance'
          text: |
            üßπ Daily maintenance completed for HireOverseas Marketplace
            üìä Check the maintenance report artifact for details
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}