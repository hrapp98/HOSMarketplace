# Database Migration Workflow
name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      migration_type:
        description: 'Migration type'
        required: true
        type: choice
        options:
          - deploy
          - reset
          - rollback
      rollback_steps:
        description: 'Number of migrations to rollback (only for rollback type)'
        required: false
        default: '1'

env:
  NODE_VERSION: '20'

jobs:
  validate-migration:
    name: Validate Migration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Validate migration files
        run: |
          # Check for syntax errors in migration files
          npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma

      - name: Check for destructive changes
        run: |
          # This would normally check against the target environment
          echo "Checking for destructive changes..."
          # Add custom validation logic here

  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: [validate-migration]
    if: github.event.inputs.environment == 'production' || github.event.inputs.migration_type == 'rollback'
    
    steps:
      - name: Create database backup
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            # Create timestamped backup
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_FILE="/opt/backups/pre_migration_${TIMESTAMP}.sql"
            
            # Backup database
            if [ "${{ github.event.inputs.environment }}" == "production" ]; then
              docker exec hireoverseas-postgres pg_dump -U hireoverseas_user hireoverseas_prod > $BACKUP_FILE
            else
              docker exec hireoverseas-postgres pg_dump -U hireoverseas_user hireoverseas_staging > $BACKUP_FILE
            fi
            
            # Compress backup
            gzip $BACKUP_FILE
            
            echo "Backup created: ${BACKUP_FILE}.gz"

  run-migration:
    name: Run Migration
    runs-on: ubuntu-latest
    needs: [validate-migration, backup-database]
    if: always() && needs.validate-migration.result == 'success' && (needs.backup-database.result == 'success' || needs.backup-database.result == 'skipped')
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Deploy migrations
        if: github.event.inputs.migration_type == 'deploy'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            cd /opt/hireoverseas-${{ github.event.inputs.environment }}
            
            # Pull latest code with migrations
            git pull origin ${{ github.event.inputs.environment == 'production' && 'main' || 'develop' }}
            
            # Set database URL based on environment
            if [ "${{ github.event.inputs.environment }}" == "production" ]; then
              export DATABASE_URL="postgresql://hireoverseas_user:${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}@postgres:5432/hireoverseas_prod"
            else
              export DATABASE_URL="postgresql://hireoverseas_user:${{ secrets.STAGING_POSTGRES_PASSWORD }}@postgres:5432/hireoverseas_staging"
            fi
            
            # Run migrations
            docker-compose exec -T app npx prisma migrate deploy
            
            # Verify migration status
            docker-compose exec -T app npx prisma migrate status

      - name: Reset database
        if: github.event.inputs.migration_type == 'reset'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            cd /opt/hireoverseas-${{ github.event.inputs.environment }}
            
            # WARNING: This will destroy all data
            echo "⚠️  RESETTING DATABASE - ALL DATA WILL BE LOST!"
            
            if [ "${{ github.event.inputs.environment }}" == "production" ]; then
              echo "❌ Database reset is not allowed in production!"
              exit 1
            fi
            
            # Set database URL
            export DATABASE_URL="postgresql://hireoverseas_user:${{ secrets.STAGING_POSTGRES_PASSWORD }}@postgres:5432/hireoverseas_staging"
            
            # Reset database
            docker-compose exec -T app npx prisma migrate reset --force
            
            # Seed with sample data if available
            if [ -f prisma/seed.ts ]; then
              docker-compose exec -T app npx prisma db seed
            fi

      - name: Rollback migrations
        if: github.event.inputs.migration_type == 'rollback'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            cd /opt/hireoverseas-${{ github.event.inputs.environment }}
            
            # Set database URL based on environment
            if [ "${{ github.event.inputs.environment }}" == "production" ]; then
              export DATABASE_URL="postgresql://hireoverseas_user:${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}@postgres:5432/hireoverseas_prod"
            else
              export DATABASE_URL="postgresql://hireoverseas_user:${{ secrets.STAGING_POSTGRES_PASSWORD }}@postgres:5432/hireoverseas_staging"
            fi
            
            # Show current migration status
            echo "Current migration status:"
            docker-compose exec -T app npx prisma migrate status
            
            # Rollback migrations (manual process in Prisma)
            echo "⚠️  Prisma doesn't support automatic rollback."
            echo "You need to:"
            echo "1. Restore from backup: /opt/backups/pre_migration_*.sql.gz"
            echo "2. Manually revert migration files"
            echo "3. Run: npx prisma migrate resolve --rolled-back MIGRATION_NAME"
            
            # List recent backups for reference
            echo "Available backups:"
            ls -la /opt/backups/pre_migration_*.sql.gz | tail -5

  verify-migration:
    name: Verify Migration
    runs-on: ubuntu-latest
    needs: [run-migration]
    if: always() && needs.run-migration.result == 'success'
    
    steps:
      - name: Verify database state
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_HOST || secrets.STAGING_HOST }}
          username: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_USER || secrets.STAGING_USER }}
          key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_KEY || secrets.STAGING_SSH_KEY }}
          port: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_PORT || secrets.STAGING_PORT }}
          script: |
            cd /opt/hireoverseas-${{ github.event.inputs.environment }}
            
            # Check migration status
            echo "Migration status:"
            docker-compose exec -T app npx prisma migrate status
            
            # Test database connectivity
            echo "Testing database connectivity:"
            docker-compose exec -T app node -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.\$connect()
                .then(() => console.log('✅ Database connection successful'))
                .catch(err => { console.error('❌ Database connection failed:', err); process.exit(1); })
                .finally(() => prisma.\$disconnect());
            "
            
            # Run basic health checks
            echo "Running application health check:"
            curl -f http://localhost/health || echo "⚠️  Health check failed"

  notify-completion:
    name: Notify Migration Completion
    runs-on: ubuntu-latest
    needs: [verify-migration]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.verify-migration.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ✅ Database migration completed successfully!
            🎯 Environment: ${{ github.event.inputs.environment }}
            🔄 Type: ${{ github.event.inputs.migration_type }}
            👤 Triggered by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.verify-migration.result == 'failure' || needs.run-migration.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            🚨 Database migration FAILED!
            🎯 Environment: ${{ github.event.inputs.environment }}
            🔄 Type: ${{ github.event.inputs.migration_type }}
            👤 Triggered by: ${{ github.actor }}
            ⚠️  Check logs and consider rollback if necessary
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}