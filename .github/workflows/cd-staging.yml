# Continuous Deployment to Staging Environment
name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/hireoverseas-staging
            
            # Pull latest docker-compose configuration
            git pull origin develop
            
            # Update environment variables
            echo "POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}" > .env
            echo "REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}" >> .env
            echo "NEXTAUTH_SECRET=${{ secrets.STAGING_NEXTAUTH_SECRET }}" >> .env
            echo "NEXTAUTH_URL=${{ secrets.STAGING_NEXTAUTH_URL }}" >> .env
            echo "STRIPE_SECRET_KEY=${{ secrets.STAGING_STRIPE_SECRET_KEY }}" >> .env
            echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STAGING_STRIPE_PUBLISHABLE_KEY }}" >> .env
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}" >> .env
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.STAGING_CLOUDINARY_CLOUD_NAME }}" >> .env
            echo "CLOUDINARY_API_KEY=${{ secrets.STAGING_CLOUDINARY_API_KEY }}" >> .env
            echo "CLOUDINARY_API_SECRET=${{ secrets.STAGING_CLOUDINARY_API_SECRET }}" >> .env
            echo "EMAIL_FROM=${{ secrets.STAGING_EMAIL_FROM }}" >> .env
            echo "EMAIL_HOST=${{ secrets.STAGING_EMAIL_HOST }}" >> .env
            echo "EMAIL_PORT=${{ secrets.STAGING_EMAIL_PORT }}" >> .env
            echo "EMAIL_USER=${{ secrets.STAGING_EMAIL_USER }}" >> .env
            echo "EMAIL_PASS=${{ secrets.STAGING_EMAIL_PASS }}" >> .env
            echo "SENTRY_DSN=${{ secrets.STAGING_SENTRY_DSN }}" >> .env
            echo "GOOGLE_ANALYTICS_ID=${{ secrets.STAGING_GOOGLE_ANALYTICS_ID }}" >> .env
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull
            
            # Run database migrations
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml run --rm app npx prisma migrate deploy
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --remove-orphans
            
            # Health check
            sleep 30
            curl -f http://localhost/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Run smoke tests
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # Basic smoke tests
            curl -f ${{ secrets.STAGING_NEXTAUTH_URL }}/health
            curl -f ${{ secrets.STAGING_NEXTAUTH_URL }}/api/health
            curl -f ${{ secrets.STAGING_NEXTAUTH_URL }}/auth/signin

      - name: Notify team on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üöÄ Successfully deployed to staging: ${{ secrets.STAGING_NEXTAUTH_URL }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify team on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '‚ùå Staging deployment failed for commit ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}