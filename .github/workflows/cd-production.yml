# Continuous Deployment to Production Environment
name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - hotfix

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-check:
    name: Final Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: ${{ secrets.STAGING_NEXTAUTH_URL }}

  backup-production:
    name: Backup Production Database
    runs-on: ubuntu-latest
    environment: production
    needs: [security-check]
    
    steps:
      - name: Create database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Create backup directory with timestamp
            BACKUP_DIR="/opt/backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            
            # Backup PostgreSQL database
            docker exec hireoverseas-postgres pg_dump -U hireoverseas_user hireoverseas_prod > $BACKUP_DIR/database.sql
            
            # Backup uploaded files
            docker cp hireoverseas-app:/app/uploads $BACKUP_DIR/uploads
            
            # Compress backup
            tar -czf $BACKUP_DIR.tar.gz -C /opt/backups $(basename $BACKUP_DIR)
            
            # Clean up uncompressed backup
            rm -rf $BACKUP_DIR
            
            # Keep only last 7 days of backups
            find /opt/backups -name "*.tar.gz" -mtime +7 -delete

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [security-check, backup-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=prod-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy to production server (Blue)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/hireoverseas-production
            
            # Pull latest docker-compose configuration
            git pull origin main
            
            # Update environment variables
            echo "POSTGRES_PASSWORD=${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}" > .env.prod
            echo "REDIS_PASSWORD=${{ secrets.PRODUCTION_REDIS_PASSWORD }}" >> .env.prod
            echo "NEXTAUTH_SECRET=${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}" >> .env.prod
            echo "NEXTAUTH_URL=${{ secrets.PRODUCTION_NEXTAUTH_URL }}" >> .env.prod
            echo "STRIPE_SECRET_KEY=${{ secrets.PRODUCTION_STRIPE_SECRET_KEY }}" >> .env.prod
            echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.PRODUCTION_STRIPE_PUBLISHABLE_KEY }}" >> .env.prod
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.PRODUCTION_STRIPE_WEBHOOK_SECRET }}" >> .env.prod
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.PRODUCTION_CLOUDINARY_CLOUD_NAME }}" >> .env.prod
            echo "CLOUDINARY_API_KEY=${{ secrets.PRODUCTION_CLOUDINARY_API_KEY }}" >> .env.prod
            echo "CLOUDINARY_API_SECRET=${{ secrets.PRODUCTION_CLOUDINARY_API_SECRET }}" >> .env.prod
            echo "EMAIL_FROM=${{ secrets.PRODUCTION_EMAIL_FROM }}" >> .env.prod
            echo "EMAIL_HOST=${{ secrets.PRODUCTION_EMAIL_HOST }}" >> .env.prod
            echo "EMAIL_PORT=${{ secrets.PRODUCTION_EMAIL_PORT }}" >> .env.prod
            echo "EMAIL_USER=${{ secrets.PRODUCTION_EMAIL_USER }}" >> .env.prod
            echo "EMAIL_PASS=${{ secrets.PRODUCTION_EMAIL_PASS }}" >> .env.prod
            echo "SENTRY_DSN=${{ secrets.PRODUCTION_SENTRY_DSN }}" >> .env.prod
            echo "GOOGLE_ANALYTICS_ID=${{ secrets.PRODUCTION_GOOGLE_ANALYTICS_ID }}" >> .env.prod
            echo "GRAFANA_PASSWORD=${{ secrets.PRODUCTION_GRAFANA_PASSWORD }}" >> .env.prod
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            
            # Run database migrations
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml run --rm app npx prisma migrate deploy
            
            # Blue-Green deployment: Start new containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale app=2 --no-recreate
            
            # Health check on new containers
            sleep 60
            for i in {1..5}; do
              if curl -f http://localhost/health; then
                echo "Health check passed"
                break
              fi
              echo "Health check failed, attempt $i/5"
              sleep 10
            done
            
            # Switch traffic to new containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
            
            # Final health check
            sleep 30
            curl -f http://localhost/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: Run production smoke tests
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Comprehensive smoke tests
            echo "Running production smoke tests..."
            
            # Health endpoints
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/health
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/api/health
            
            # Authentication endpoints
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/auth/signin
            
            # Core pages
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/jobs
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/talent
            
            # API endpoints
            curl -f ${{ secrets.PRODUCTION_NEXTAUTH_URL }}/api/auth/session
            
            echo "All smoke tests passed!"

      - name: Update monitoring dashboards
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Restart Grafana to pick up any new dashboard changes
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml restart grafana
            
            # Import any new Grafana dashboards
            sleep 30
            curl -X POST http://localhost:3001/api/admin/provisioning/dashboards/reload \
              -H "Authorization: Basic $(echo -n admin:${{ secrets.PRODUCTION_GRAFANA_PASSWORD }} | base64)"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify team on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üéâ Successfully deployed to production!
            üîó URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}
            üìä Monitoring: http://${{ secrets.PRODUCTION_HOST }}:3001
            üîç Commit: ${{ github.sha }}
            üë§ Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify team on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            üö® Production deployment FAILED!
            üìç Commit: ${{ github.sha }}
            üë§ Attempted by: ${{ github.actor }}
            ‚ö†Ô∏è  Please check the logs and rollback if necessary
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            üöÄ Production deployment successful!
            
            ## Changes
            - Automated deployment from main branch
            - All tests passed
            - Security scan completed
            - Database backup created
            
            ## Monitoring
            - Production URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}
            - Grafana Dashboard: http://${{ secrets.PRODUCTION_HOST }}:3001
            
            ## Rollback
            If issues are found, rollback using:
            ```bash
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            # Restore from backup if needed
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            ```
          draft: false
          prerelease: false