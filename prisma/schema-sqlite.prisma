// Simplified Prisma schema for SQLite (development only)
// This gets you running without external PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  type          UserType  @default(FREELANCER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  Profile?
  jobs     Job[]
  applications Application[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  reviewsGiven     Review[]  @relation("ReviewGiver")
  reviewsReceived  Review[]  @relation("ReviewReceiver")
  payments         Payment[]
  subscriptions    Subscription[]
  notifications    Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  title       String?
  bio         String?
  skills      String?
  hourlyRate  Float?
  experience  String?
  education   String?
  portfolio   String?
  location    String?
  timezone    String?
  resume      String?
  avatar      String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id          String      @id @default(cuid())
  title       String
  description String
  budget      Float?
  type        JobType     @default(FIXED)
  category    String
  skills      String?
  duration    String?
  experience  String?
  status      JobStatus   @default(OPEN)
  postedById  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  postedBy     User          @relation(fields: [postedById], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id          String            @id @default(cuid())
  jobId       String
  freelancerId String
  coverLetter String?
  proposal    String?
  bidAmount   Float?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  job        Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer User @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@unique([jobId, freelancerId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Review {
  id         String @id @default(cuid())
  rating     Int
  comment    String?
  reviewerId String
  revieweeId String
  jobId      String?
  createdAt  DateTime @default(now())

  reviewer User @relation("ReviewGiver", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee User @relation("ReviewReceiver", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, revieweeId, jobId])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  userId        String
  jobId         String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  plan               SubscriptionPlan
  status             SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserType {
  FREELANCER
  EMPLOYER
  ADMIN
}

enum JobType {
  FIXED
  HOURLY
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}